// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SurveyResponse {
  id                        String   @id @default(uuid())
  surveySetId               String
  department                String
  awareness                 String   // JSON stored as string for SQLite
  urgentTrainings          String   // JSON array stored as string
  urgentTrainingsOther     String?
  financeWellnessNeeds     String   // JSON array stored as string
  cultureWellnessNeeds     String   // JSON array stored as string
  cultureWellnessOther     String?
  digitalSkillsNeeds       String   // JSON array stored as string
  digitalSkillsOther       String?
  professionalDevNeeds      String   // JSON array stored as string
  professionalDevOther      String?
  confidenceLevel           String
  facedUnsureSituation      Boolean
  unsureSituationDescription String?
  observedIssues            String   // JSON array stored as string
  observedIssuesOther        String?
  knewReportingChannel       String
  trainingMethod             String
  trainingMethodOther        String?
  refresherFrequency         String
  prioritizedPolicies        String   // JSON array stored as string
  prioritizationReason       String
  policyChallenges           String   // JSON array stored as string
  policyChallengesOther      String?
  complianceSuggestions      String
  generalComments            String
  createdAt                  DateTime @default(now()) @map("timestamp")
  
  // Relations
  surveySet                  SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@map("survey_responses")
}

model SurveySet {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  sections          SurveySection[]
  questions         SurveyQuestion[]
  responses         SurveyResponse[]
  configs           SurveyConfig[]

  @@map("survey_sets")
}

model SurveyConfig {
  id                String   @id @default(uuid())
  surveySetId       String?
  isActive          Boolean  @default(true)
  startDate         DateTime
  endDate           DateTime
  title             String   @default("Policy Awareness Survey")
  description       String?
  expectedResponses Int      @default(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  surveySet         SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@map("survey_config")
}

model AdminUser {
  id                String   @id @default(uuid())
  username          String   @unique
  email             String   @unique
  passwordHash      String
  fullName          String
  role              String   @default("admin")
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("admin_users")
}

model DepartmentCount {
  id                String   @id @default(uuid())
  department        String
  staffCount        Int
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("department_counts")
}

model SurveySection {
  id                String   @id @default(uuid())
  surveySetId       String?
  sectionKey        String
  title             String
  description       String?
  order             Int
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  surveySet         SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@unique([surveySetId, sectionKey])
  @@map("survey_sections")
}

model SurveyQuestion {
  id                String   @id @default(uuid())
  surveySetId       String?
  section           String
  questionType      String
  questionText      String
  questionNumber    Int
  isRequired        Boolean  @default(true)
  options           String?
  validationRules   String?
  placeholder       String?
  helpText          String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  surveySet         SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@unique([surveySetId, section, questionNumber])
  @@map("survey_questions")
}
