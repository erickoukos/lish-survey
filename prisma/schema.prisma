generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SurveyResponse {
  id                         String    @id @default(uuid())
  department                 String
  awareness                  String
  urgentTrainings            String
  urgentTrainingsOther       String?
  financeWellnessNeeds       String
  cultureWellnessNeeds       String
  cultureWellnessOther       String?
  digitalSkillsNeeds         String
  digitalSkillsOther         String?
  professionalDevNeeds       String
  professionalDevOther       String?
  confidenceLevel            String
  facedUnsureSituation       Boolean
  unsureSituationDescription String?
  observedIssues             String
  observedIssuesOther        String?
  knewReportingChannel       String
  trainingMethod             String
  trainingMethodOther        String?
  refresherFrequency         String
  prioritizedPolicies        String
  prioritizationReason       String
  policyChallenges           String
  complianceSuggestions      String
  generalComments            String
  createdAt                  DateTime  @default(now()) @map("timestamp")
  policyChallengesOther      String?
  surveySetId                String
  surveySet                  SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@map("survey_responses")
}

model SurveySet {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  configs     SurveyConfig[]
  questions   SurveyQuestion[]
  responses   SurveyResponse[]
  sections    SurveySection[]

  @@map("survey_sets")
}

model SurveyConfig {
  id                String    @id @default(uuid())
  isActive          Boolean   @default(true)
  startDate         DateTime
  endDate           DateTime
  title             String    @default("Policy Awareness Survey")
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  expectedResponses Int       @default(100)
  surveySetId       String
  surveySet         SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@map("survey_config")
}

model AdminUser {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  fullName     String
  role         String    @default("admin")
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("admin_users")
}

model DepartmentCount {
  id         String   @id @default(uuid())
  department String
  staffCount Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("department_counts")
}

model SurveySection {
  id          String    @id @default(uuid())
  sectionKey  String
  title       String
  description String?
  order       Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  surveySetId String
  surveySet   SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@unique([surveySetId, sectionKey])
  @@map("survey_sections")
}

model SurveyQuestion {
  id              String    @id @default(uuid())
  section         String
  questionType    String
  questionText    String
  questionNumber  Int
  isRequired      Boolean   @default(true)
  options         String?
  validationRules String?
  placeholder     String?
  helpText        String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  surveySetId     String
  surveySet       SurveySet @relation(fields: [surveySetId], references: [id], onDelete: Cascade)

  @@unique([surveySetId, section, questionNumber])
  @@map("survey_questions")
}
