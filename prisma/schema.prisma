// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SurveyResponse {
  id                        String   @id @default(uuid())
  surveyPeriod              String   @default("default") // Track which survey period this response belongs to
  department                String
  awareness                 String   // JSON stored as string for SQLite
  urgentTrainings          String   // JSON array stored as string
  urgentTrainingsOther     String?
  financeWellnessNeeds     String   // JSON array stored as string
  cultureWellnessNeeds     String   // JSON array stored as string
  cultureWellnessOther     String?
  digitalSkillsNeeds       String   // JSON array stored as string
  digitalSkillsOther       String?
  professionalDevNeeds      String   // JSON array stored as string
  professionalDevOther      String?
  confidenceLevel           String
  facedUnsureSituation      Boolean
  unsureSituationDescription String?
  observedIssues            String   // JSON array stored as string
  observedIssuesOther        String?
  knewReportingChannel       String
  trainingMethod             String
  trainingMethodOther        String?
  refresherFrequency         String
  prioritizedPolicies        String   // JSON array stored as string
  prioritizationReason       String
  policyChallenges           String   // JSON array stored as string
  policyChallengesOther      String?
  complianceSuggestions      String
  generalComments            String
  createdAt                  DateTime @default(now()) @map("timestamp")

  @@map("survey_responses")
}

model SurveyConfig {
  id                String   @id @default("default")
  isActive          Boolean  @default(true)
  startDate         DateTime
  endDate           DateTime
  title             String   @default("Policy Awareness Survey")
  description       String?
  expectedResponses Int      @default(100)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("survey_config")
}

model SurveyQuestion {
  id                String   @id @default(uuid())
  section           String   // Section identifier (e.g., "A", "B", "C")
  questionType      String   // "text", "select", "multiselect", "rating", "boolean"
  questionText      String
  questionNumber    Int      // Order within section
  isRequired        Boolean  @default(true)
  options           String?  // JSON array of options for select/multiselect
  validationRules   String?  // JSON object with validation rules
  placeholder       String?
  helpText          String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  sectionRef        SurveySection? @relation(fields: [section], references: [sectionKey])

  @@map("survey_questions")
  @@unique([section, questionNumber])
}

model SurveySection {
  id                String   @id @default(uuid())
  sectionKey        String   @unique // "A", "B", "C", etc.
  title             String
  description       String?
  order             Int
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  questions         SurveyQuestion[]

  @@map("survey_sections")
}

model DepartmentCount {
  id                String   @id @default(uuid())
  department        String   @unique
  staffCount        Int
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("department_counts")
}
